OIL_VERSION = "2.5";
IMPLEMENTATION Extend {
	OS {
		ENUM WITH_AUTO  [
			STANDARD,
			EXTENDED
		] STATUS = NO_DEFAULT;
		BOOLEAN  [
			TRUE,
			FALSE
		] STARTUPHOOK;
		BOOLEAN  [
			TRUE,
			FALSE
		] ERRORHOOK;
		BOOLEAN  [
			TRUE,
			FALSE
		] SHUTDOWNHOOK;
		BOOLEAN  [
			TRUE,
			FALSE
		] PRETASKHOOK;
		BOOLEAN  [
			TRUE,
			FALSE
		] POSTTASKHOOK;
		BOOLEAN  [
			TRUE,
			FALSE
		] USEGETSERVICEID;
		BOOLEAN  [
			TRUE,
			FALSE
		] USEPARAMETERACCESS;
		BOOLEAN  [
			TRUE,
			FALSE
		] USERESSCHEDULER = TRUE;
		
		BOOLEAN [
		  TRUE,
		  FALSE
		] USESTACKSHARE = TRUE;    /*addition */
    BOOLEAN [
      TRUE,
      FALSE
    ] USESTACKCHECK  = TRUE;    /*addition */
    BOOLEAN [
      TRUE,
      FALSE
    ] ORTIDEBUGSUPPORT = TRUE;   /*addition */

		ENUM [
			BCC1,
			BCC2,
			ECC1,
			ECC2
		] CC = BCC1;				 /*addition */
    
		ENUM WITH_AUTO [
			NON,
			MIXED,
			FULL
		] SCHEDULETYPE = MIXED;	/*addition - SCHEDULE >>> SCHEDULETYPE*/
    
		ENUM [
			LIST,
			MAP
		] QMETHOD = LIST;	 /*addition - test.oil*/
 
 		UINT32 QSIZE = 10;  	 /*addition */
	} ;

	APPMODE {
	  STRING APPMODENAME = "";
	} ;

	TASK {
		BOOLEAN  [
			TRUE {
				APPMODE_TYPE APPMODE[];
			},
			FALSE
		] AUTOSTART;
		UINT32 PRIORITY;
		UINT32 ACTIVATION;
		ENUM [
			NON,
			FULL
		] SCHEDULE;
		EVENT_TYPE EVENT[];
		RESOURCE_TYPE RESOURCE[];
		MESSAGE_TYPE MESSAGE[];
		
		ENUM WITH_AUTO [
			BT,
			ET
		] TYPE = BT;				 /*addition */
		UINT32 STACKSIZE = 256;	 /*addition */
	} ;

	ISR {
		UINT32  [1,2] CATEGORY = 1;
		RESOURCE_TYPE RESOURCE[];
		MESSAGE_TYPE MESSAGE[];

		UINT32 IRQNUM = NO_DEFAULT;	 /*addition */
    UINT32 PRIORITY = 64;			 /*addition */
    UINT32 STACKSIZE = 256;		 /*addition */
	} ;

	COM {
		FLOAT COMTIMEBASE = 0.001;
		BOOLEAN  [
			TRUE,
			FALSE
		] COMERRORHOOK = FALSE;
		BOOLEAN  [
			TRUE,
			FALSE
		] COMUSEGETSERVICEID = FALSE;
		BOOLEAN  [
			TRUE,
			FALSE
		] COMUSEPARAMETERACCESS = FALSE;
		BOOLEAN  [
			TRUE,
			FALSE
		] COMSTARTCOMEXTENSION = FALSE;
		STRING COMAPPMODE[];
		ENUM  [
			COMSTANDARD,
			COMEXTENDED
		] COMSTATUS = COMSTANDARD;
		STRING USE[];
	} ;

	NM {
	  STRING NMNAME="";
	} ;

	COUNTER {
		UINT32 MINCYCLE;
		UINT32 MAXALLOWEDVALUE;
		UINT32 TICKSPERBASE;
		UINT32 [0..255] HWTIMER = 0;  /* addition */
	} ;

	ALARM {
		COUNTER_TYPE COUNTER;	
		ENUM  [
			ACTIVATETASK {
				TASK_TYPE TASK;
			},
			SETEVENT {
				TASK_TYPE TASK;
				EVENT_TYPE EVENT;
			},
			ALARMCALLBACK {
				STRING ALARMCALLBACKNAME;
			}
		] ACTION;
		BOOLEAN  [
			TRUE {
				UINT32 ALARMTIME;
				UINT32 CYCLETIME;
				APPMODE_TYPE APPMODE[];
			},
			FALSE
		] AUTOSTART;
	} ;

	EVENT {
		UINT64 WITH_AUTO MASK;
	} ;

	RESOURCE {
		ENUM  [
			STANDARD,
			LINKED {
				RESOURCE_TYPE LINKEDRESOURCE;
			},
			INTERNAL
		] RESOURCEPROPERTY;
		UINT32 CEILINGPRIORITY = 256;   /* addition */
	} ;

	MESSAGE {
		ENUM  [
			SEND_STATIC_INTERNAL {
				STRING CDATATYPE;
			},
			SEND_STATIC_EXTERNAL {
				STRING CDATATYPE;
				ENUM WITH_AUTO  [
					TRIGGERED,
					PENDING
				] TRANSFERPROPERTY = AUTO;
				ENUM  [
					ALWAYS,
					NEVER,
					MASKEDNEWEQUALSX {
						UINT64 MASK;
						UINT64 X;
					},
					MASKEDNEWDIFFERSX {
						UINT64 MASK;
						UINT64 X;
					},
					NEWISEQUAL,
					NEWISDIFFERENT,
					MASKEDNEWEQUALSMASKEDOLD {
						UINT64 MASK;
					},
					MASKEDNEWDIFFERSMASKEDOLD {
						UINT64 MASK;
					},
					NEWISWITHIN {
						UINT64 MIN;
						UINT64 MAX;
					},
					NEWISOUTSIDE {
						UINT64 MIN;
						UINT64 MAX;
					},
					NEWISGREATER,
					NEWISLESSOREQUAL,
					NEWISLESS,
					NEWISGREATEROREQUAL,
					ONEEVERYN {
						UINT64 PERIOD;
						UINT64 OFFSET;
					}
				] FILTER = ALWAYS;
				STRING NETWORKORDERCALLOUT = "";
				STRING CPUORDERCALLOUT = "";
				UINT64 WITH_AUTO INITIALVALUE = AUTO;
				NETWORKMESSAGE_TYPE NETWORKMESSAGE;
			},
			SEND_DYNAMIC_EXTERNAL {
				ENUM WITH_AUTO  [
					TRIGGERED,
					PENDING
				] TRANSFERPROPERTY = AUTO;
				STRING NETWORKORDERCALLOUT = "";
				STRING CPUORDERCALLOUT = "";
				UINT64 WITH_AUTO INITIALVALUE = AUTO;
				NETWORKMESSAGE_TYPE NETWORKMESSAGE;
			},
			SEND_ZERO_INTERNAL,
			SEND_ZERO_EXTERNAL {
				STRING NETWORKORDERCALLOUT = "";
				STRING CPUORDERCALLOUT = "";
				NETWORKMESSAGE_TYPE NETWORKMESSAGE;
			},
			RECEIVE_ZERO_INTERNAL {
				MESSAGE_TYPE SENDINGMESSAGE;
			},
			RECEIVE_ZERO_EXTERNAL {
				STRING NETWORKORDERCALLOUT = "";
				STRING CPUORDERCALLOUT = "";
				NETWORKMESSAGE_TYPE NETWORKMESSAGE;
			},
			RECEIVE_UNQUEUED_INTERNAL {
				MESSAGE_TYPE SENDINGMESSAGE;
				ENUM  [
					ALWAYS,
					NEVER,
					MASKEDNEWEQUALSX {
						UINT64 MASK;
						UINT64 X;
					},
					MASKEDNEWDIFFERSX {
						UINT64 MASK;
						UINT64 X;
					},
					NEWISEQUAL,
					NEWISDIFFERENT,
					MASKEDNEWEQUALSMASKEDOLD {
						UINT64 MASK;
					},
					MASKEDNEWDIFFERSMASKEDOLD {
						UINT64 MASK;
					},
					NEWISWITHIN {
						UINT64 MIN;
						UINT64 MAX;
					},
					NEWISOUTSIDE {
						UINT64 MIN;
						UINT64 MAX;
					},
					NEWISGREATER,
					NEWISLESSOREQUAL,
					NEWISLESS,
					NEWISGREATEROREQUAL,
					ONEEVERYN {
						UINT64 PERIOD;
						UINT64 OFFSET;
					}
				] FILTER = ALWAYS;
				UINT64 INITIALVALUE = 0;
			},
			RECEIVE_QUEUED_INTERNAL {
				MESSAGE_TYPE SENDINGMESSAGE;
				ENUM  [
					ALWAYS,
					NEVER,
					MASKEDNEWEQUALSX {
						UINT64 MASK;
						UINT64 X;
					},
					MASKEDNEWDIFFERSX {
						UINT64 MASK;
						UINT64 X;
					},
					NEWISEQUAL,
					NEWISDIFFERENT,
					MASKEDNEWEQUALSMASKEDOLD {
						UINT64 MASK;
					},
					MASKEDNEWDIFFERSMASKEDOLD {
						UINT64 MASK;
					},
					NEWISWITHIN {
						UINT64 MIN;
						UINT64 MAX;
					},
					NEWISOUTSIDE {
						UINT64 MIN;
						UINT64 MAX;
					},
					NEWISGREATER,
					NEWISLESSOREQUAL,
					NEWISLESS,
					NEWISGREATEROREQUAL,
					ONEEVERYN {
						UINT64 PERIOD;
						UINT64 OFFSET;
					}
				] FILTER = ALWAYS;
				UINT64 INITIALVALUE = 0;
				UINT32 QUEUESIZE;
			},
			RECEIVE_UNQUEUED_EXTERNAL {
				STRING CDATATYPE;
				ENUM  [
					ALWAYS,
					NEVER,
					MASKEDNEWEQUALSX {
						UINT64 MASK;
						UINT64 X;
					},
					MASKEDNEWDIFFERSX {
						UINT64 MASK;
						UINT64 X;
					},
					NEWISEQUAL,
					NEWISDIFFERENT,
					MASKEDNEWEQUALSMASKEDOLD {
						UINT64 MASK;
					},
					MASKEDNEWDIFFERSMASKEDOLD {
						UINT64 MASK;
					},
					NEWISWITHIN {
						UINT64 MIN;
						UINT64 MAX;
					},
					NEWISOUTSIDE {
						UINT64 MIN;
						UINT64 MAX;
					},
					NEWISGREATER,
					NEWISLESSOREQUAL,
					NEWISLESS,
					NEWISGREATEROREQUAL,
					ONEEVERYN {
						UINT64 PERIOD;
						UINT64 OFFSET;
					}
				] FILTER = ALWAYS;
				BOOLEAN  [
					TRUE {
						MESSAGE_TYPE RECEIVEMESSAGE;
					},
					FALSE {
						STRING NETWORKORDERCALLOUT = "";
						STRING CPUORDERCALLOUT = "";
						NETWORKMESSAGE_TYPE NETWORKMESSAGE;
					}
				] LINK;
				UINT64 WITH_AUTO INITIALVALUE = AUTO;
			},
			RECEIVE_QUEUED_EXTERNAL {
				STRING CDATATYPE;
				UINT32 QUEUESIZE;
				ENUM  [
					ALWAYS,
					NEVER,
					MASKEDNEWEQUALSX {
						UINT64 MASK;
						UINT64 X;
					},
					MASKEDNEWDIFFERSX {
						UINT64 MASK;
						UINT64 X;
					},
					NEWISEQUAL,
					NEWISDIFFERENT,
					MASKEDNEWEQUALSMASKEDOLD {
						UINT64 MASK;
					},
					MASKEDNEWDIFFERSMASKEDOLD {
						UINT64 MASK;
					},
					NEWISWITHIN {
						UINT64 MIN;
						UINT64 MAX;
					},
					NEWISOUTSIDE {
						UINT64 MIN;
						UINT64 MAX;
					},
					NEWISGREATER,
					NEWISLESSOREQUAL,
					NEWISLESS,
					NEWISGREATEROREQUAL,
					ONEEVERYN {
						UINT64 PERIOD;
						UINT64 OFFSET;
					}
				] FILTER = ALWAYS;
				BOOLEAN  [
					TRUE {
						MESSAGE_TYPE RECEIVEMESSAGE;
					},
					FALSE {
						STRING NETWORKORDERCALLOUT = "";
						STRING CPUORDERCALLOUT = "";
						NETWORKMESSAGE_TYPE NETWORKMESSAGE;
					}
				] LINK;
				UINT64 WITH_AUTO INITIALVALUE = AUTO;
			},
			RECEIVE_DYNAMIC_EXTERNAL {
				BOOLEAN  [
					TRUE {
						MESSAGE_TYPE RECEIVEMESSAGE;
					},
					FALSE {
						STRING NETWORKORDERCALLOUT = "";
						STRING CPUORDERCALLOUT = "";
						NETWORKMESSAGE_TYPE NETWORKMESSAGE;
					}
				] LINK;
				UINT64 WITH_AUTO INITIALVALUE = AUTO;
			},
			RECEIVE_ZERO_SENDERS {
				STRING CDATATYPE;
				UINT64 INITIALVALUE = 0;
			}
		] MESSAGEPROPERTY;
		ENUM  [
			NONE,
			ACTIVATETASK {
				TASK_TYPE TASK;
			},
			SETEVENT {
				TASK_TYPE TASK;
				EVENT_TYPE EVENT;
			},
			COMCALLBACK {
				STRING CALLBACKROUTINENAME;
				MESSAGE_TYPE MESSAGE[];
			},
			FLAG {
				STRING FLAGNAME;
			},
			INMCALLBACK {
				STRING WITH_AUTO CALLBACKROUTINENAME;
				UINT32 WITH_AUTO MONITOREDIPDU;
			}
		] NOTIFICATION = NONE;
		ENUM  [
			NONE,
			ACTIVATETASK {
				TASK_TYPE TASK;
			},
			SETEVENT {
				TASK_TYPE TASK;
				EVENT_TYPE EVENT;
			},
			COMCALLBACK {
				STRING CALLBACKROUTINENAME;
				MESSAGE_TYPE MESSAGE[];
			},
			FLAG {
				STRING FLAGNAME;
			},
			INMCALLBACK {
				STRING WITH_AUTO CALLBACKROUTINENAME;
				UINT32 WITH_AUTO MONITOREDIPDU;
			}
		] NOTIFICATIONERROR = NONE;
	} ;

	NETWORKMESSAGE {
		IPDU_TYPE IPDU;
		ENUM  [
			STATIC {
				UINT32 SIZEINBITS;
				ENUM  [
					LITTLEENDIAN,
					BIGENDIAN
				] BITORDERING;
				UINT32 BITPOSITION;
				ENUM  [
					UNSIGNEDINTEGER,
					BYTEARRAY
				] DATAINTERPRETATION;
				UINT64 INITIALVALUE = 0;
				ENUM  [
					SENT {
						ENUM WITH_AUTO  [
							TRIGGERED,
							PENDING
						] TRANSFERPROPERTY = AUTO;
					},
					RECEIVE
				] DIRECTION;
			},
			DYNAMIC {
				UINT32 MAXIMUMSIZEINBITS;
				ENUM  [
					LITTLEENDIAN,
					BIGENDIAN
				] BITORDERING;
				UINT32 BITPOSITION;
				UINT64 INITIALVALUE = 0;
				ENUM  [
					SENT {
						ENUM WITH_AUTO  [
							TRIGGERED,
							PENDING
						] TRANSFERPROPERTY = AUTO;
					},
					RECEIVE
				] DIRECTION;
			},
			ZERO
		] MESSAGEPROPERTY;
	} ;

	IPDU {
		UINT32 SIZEINBITS;
		ENUM  [
			SENT {
				ENUM  [
					DIRECT {
						UINT64 MINIMUMDELAYTIME = 0;
					},
					PERIODIC {
						UINT64 TIMEPERIOD;
						UINT64 WITH_AUTO TIMEOFFSET = AUTO;
					},
					MIXED {
						UINT64 TIMEPERIOD;
						UINT64 WITH_AUTO TIMEOFFSET = AUTO;
						UINT64 MINIMUMDELAYTIME = 0;
					}
				] TRANSMISSIONMODE;
				UINT64 TIMEOUT = 0;
			},
			RECEIVED {
				UINT64 TIMEOUT = 0;
				UINT64 WITH_AUTO FIRSTTIMEOUT = AUTO;
			}
		] IPDUPROPERTY;
		STRING IPDUCALLOUT = "";
		STRING LAYERUSED = "";
	} ;

} ;
